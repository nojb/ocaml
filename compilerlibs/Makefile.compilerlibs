#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

COMPILERLIBSDIR=compilerlibs/

# Variables

# DO_NOT_PREFIX
#
# This variable keeps track of those compilation units that should *not* be
# prefixed (eg. toplevel/topdirs.cmo).

DO_NOT_PREFIX=

# Begin Transitional

# IMPLEMENTATION_ONLY
#
# This variable lists all unit names consisting of an .ml file without a
# corresponding .mli. It is used to state the right dependencies for deprecated
# unit names below, without having to run `ocamldep`. See below for the
# compilation rules of deprecated units.

IMPLEMENTATION_ONLY=\
	typing/cmt2annot.cmo \
	asmcomp/branch_relaxation_intf.cmo \
	asmcomp/debug/compute_ranges_intf.cmo \
	asmcomp/arch.cmo \
	asmcomp/CSE.cmo

# End Transitional

# Utility macros: these macros are used below to ...

# $(call deprecated-file,LIST)
#
# Map each element of LIST of the form <dir>/<file> to compilerlibs/<file> *if*
# <dir>/<file> does not appear in $(DO_NOT_PREFIX).  Otherwise, the element is
# mapped to the empty string.

define deprecated-file
$(addprefix $(COMPILERLIBSDIR),$(notdir $(filter-out $(DO_NOT_PREFIX),$(1))))
endef

# $(call prefix-file,PREFIX,LIST)

# Map each element of LIST of the form <dir>/<file> to <dir>/PREFIX<file> *if*
# <dir>/<file> does not appear in $(DO_NOT_PREFIX).  Otherwise, the element is
# returned unchanged.

define prefix-file
$(foreach x,$(2),$(if $(filter $(DO_NOT_PREFIX),$(x)),$(x),$(dir $(x))$(1)$(notdir $(x))))
endef

# $(call compile-impl,PREFIX,NAME)
#
# If NAME belongs to $(DO_NOT_PREFIX), do nothing. Otherwise, define compilation
# rules for unit NAME with target prefix PREFIX.  NAME is assumed to be a unit
# name ending in .cmo. Additionally in this case, define a rule to generate a
# compatibility shim, and define a compilation rule for it.
#
# For example, $(call compile-impl,ocamlcommon__,bytecomp/meta.cmo) generates
# the following rules:
#
#   bytecomp/ocamlcommon__meta.cmo: bytecomp/meta.ml
#   	$(CAMLC) $(COMPFLAGS) -o $@ -c $<
#
#   bytecomp/ocamlcommon__meta.cmi: bytecomp/meta.mli
#   	$(CAMLC) $(COMPFLAGS) -o $@ -c $<
#
#   bytecomp/ocamlcommon_meta.cmx: bytecomp/meta.ml
#   	$(CAMLC) $(COMPFLAGS) $(OPTCOMPFLAGS) -o $@ -c $<
#
#   compilerlibs/meta.ml: compilerlibs/Makefile.compilerlibs
#       ....
#
#   compilerlibs/meta.cmo: bytecomp/ocamlcommon__meta.cmi
#
#   compilerlibs/meta.cmx: bytecomp/ocamlcommon__meta.cmx bytecomp/ocamlcommon__meta.cmi
#
# The dependencies for the deprecated units could be obtained by using ocamldep,
# but a manual approach is preferred to avoid polluting the .depend file
# (especially as these units will be removed once the transitional period is
# over and the dependencies are very simple.

define compile-impl
ifneq ($(filter-out $(DO_NOT_PREFIX),$(2)),)
$(call prefix-file,$(1),$(2)): $(2:.cmo=.ml)
	$$(CAMLC) $$(COMPFLAGS) -o $$@ -c $$<

$(call prefix-file,$(1),$(2:.cmo=.cmi)): $(2:.cmo=.mli)
	$$(CAMLC) $$(COMPFLAGS) -o $$@ -c $$<

$(call prefix-file,$(1),$(2:.cmo=.cmx)): $(2:.cmo=.ml)
	$$(CAMLOPT) $$(COMPFLAGS) $$(OPTCOMPFLAGS) -o $$@ -c $$<

# Begin Transitional
$(call deprecated-file,$(2:.cmo=.ml)): $(COMPILERLIBSDIR)Makefile.compilerlibs
	$$(AWK) -f $(COMPILERLIBSDIR)generate_deprecated.awk -v PREFIX=$(1:__=) -v NAME=$(2) > $$@

$(call deprecated-file,$(2)): $(call prefix-file,$(1),$(if $(filter $(2),$(IMPLEMENTATION_ONLY)),$(2),$(2:.cmo=.cmi)))

$(call deprecated-file,$(2:.cmo=.cmx)): $(call prefix-file,$(1),$(2:.cmo=.cmx) $(if $(filter $(2),$(IMPLEMENTATION_ONLY)),,$(2:.cmo=.cmi)))
# End Transitional
endif
endef

# $(call compile-intf,PREFIX,NAME)
#
# If NAME belongs to $(DO_NOT_PREFIX), do nothing. Otherwise, define compilation
# rules for unit NAME with target prefix PREFIX.  NAME is assumed to be a unit
# name ending in .cmi. Additionally in this case, define a rule to generate a
# compatibility shim, and define a compilation rule for it.
#
# For example, $(call compile-intf,ocamlcommon__,parsing/parsetree.cmi)
# generates the following rules:
#
#   parsing/ocamlcommon__parsetree.cmi: bytecomp/meta.mli
#   	$(CAMLC) $(COMPFLAGS) -o $@ -c $<
#
#   compilerlibs/parsetree.mli: compilerlibs/Makefile.compilerlibs
#       ....
#
#   compilerlibs/parsetree.cmi: parsing/ocamlcommon__parsetree.cmi
#
# The dependencies for the deprecated units could be obtained by using ocamldep,
# but a manual approach is preferred to avoid polluting the .depend file
# (especially as these units will be removed once the transitional period is
# over and the dependencies are very simple.

define compile-intf
ifneq ($(filter-out $(DO_NOT_PREFIX),$(2)),)
$(call prefix-file,$(1),$(2)): $(2:.cmi=.mli)
	$$(CAMLC) $$(COMPFLAGS) -o $$@ -c $$<

# Begin Transitional
$(call deprecated-file,$(2:.cmi=.mli)): $(COMPILERLIBSDIR)Makefile.compilerlibs
	$$(AWK) -f $(COMPILERLIBSDIR)generate_deprecated.awk -v PREFIX=$(1:__=) -v NAME=$(2) > $$@

$(call deprecated-file,$(2)): $(call prefix-file,$(1),$(2))
# End Transitional
endif
endef

define NEWLINE


endef

# $(call declare-library,PREFIX,LIST-CMOS,LIST-CMIS)
#
# Use above macros to define compilation rules and .depend postprocessing script
# for a library corresponding to PREFIX consisting of LIST-CMOS and LIST-CMIS.
#
# The .depend postprocessing script consists of a sed script that rewrites
# each "short" path into a "long" path.
#
# For example, for bytecomp/meta.cmo, the generated script will contain the line
#
#   s#bytecomp/meta[.]#bytecomp/ocamlbytecomp__meta.#g
#
# Note that there is one sed script per library; these are all concatenated
# together into a single sed script compilerlibs/compilerlibs.sed further below.

define declare-library
$(foreach cmo,$(2),$(eval $(call compile-impl,$(1),$(cmo))))
$(foreach cmi,$(3),$(eval $(call compile-intf,$(1),$(cmi))))

$(COMPILERLIBSDIR)$(1:__=.sed): $(COMPILERLIBSDIR)Makefile.compilerlibs
	rm -f $$@
	$(foreach x,$(basename $(filter-out $(DO_NOT_PREFIX),$(2) $(3))),echo "s#$(x)[.]#$(call prefix-file,$(1),$(x)).#g" >> $$@ $$(NEWLINE))
endef

# $(call declare-map,PREFIX,LIST-UNITS)
#
# Define rules to generate and compile a "map" file for a library corresponding
# to PREFIX, mapping short names to long names for every unit in LIST-UNITS.
#
# For example, $(call declare-map,ocamlcommon__,$(COMMON)) will
# generate rules:
#
#   compilerlibs/ocamlcommon.mli: compilerlibs/Makefile.compilerlibs \
#     compilerlibs/generate_module_aliases.awk
#   	...
#
#   compilerlibs/ocamlcommon.cmi: compierlibs/ocamlcommon.mli
#   	$(CAMLC) -no-alias-deps -w -49 -c $<

define declare-map
$(COMPILERLIBSDIR)$(1:__=.mli): $(COMPILERLIBSDIR)Makefile.compilerlibs $(COMPILERLIBSDIR)generate_module_aliases.awk
	echo $(sort $(basename $(notdir $(filter-out $(DO_NOT_PREFIX),$(2))))) | \
	  $$(AWK) -f $(COMPILERLIBSDIR)generate_module_aliases.awk > $$@

$(COMPILERLIBSDIR)$(1:__=.cmi): $(COMPILERLIBSDIR)$(1:__=.mli)
	$$(CAMLC) -no-alias-deps -w -49 -c $$<
endef

partialclean::
	rm -f $(COMPILERLIBSDIR)*.ml* $(COMPILERLIBSDIR)*.cm* \
	  $(COMPILERLIBSDIR)*.o $(COMPILERLIBSDIR)*.a $(COMPILERLIBSDIR).lib \
	  $(COMPILERLIBSDIR)*.obj $(COMPILERLIBSDIR)*.sed

# Targets and dependencies for compilerlibs archives

# This file is meant to be included from the root Makefile, not to be
# executed directly (this is why it is not simply named Makefile).

# For each group of compilation units, we have a variable GROUP with
# only .cmo files, and a separate variable GROUP_CMI for .cmi files
# corresponding to the .mli-only modules only. These .cmi are not
# linked in the archive, but they are marked as dependencies to ensure
# that they are consistent with the interface digests in the archives.

UTILS=utils/config.cmo utils/build_path_prefix_map.cmo utils/misc.cmo \
	utils/identifiable.cmo utils/numbers.cmo utils/arg_helper.cmo \
	utils/clflags.cmo utils/profile.cmo utils/load_path.cmo \
	utils/terminfo.cmo utils/ccomp.cmo utils/warnings.cmo \
	utils/consistbl.cmo utils/strongly_connected_components.cmo \
	utils/targetint.cmo utils/int_replace_polymorphic_compare.cmo \
	utils/domainstate.cmo
UTILS_CMI=

PARSING=parsing/location.cmo parsing/longident.cmo \
  parsing/docstrings.cmo parsing/syntaxerr.cmo \
  parsing/ast_helper.cmo \
  parsing/pprintast.cmo \
  parsing/camlinternalMenhirLib.cmo parsing/parser.cmo \
  parsing/lexer.cmo parsing/parse.cmo parsing/printast.cmo \
  parsing/ast_mapper.cmo parsing/ast_iterator.cmo parsing/attr_helper.cmo \
  parsing/builtin_attributes.cmo parsing/ast_invariants.cmo parsing/depend.cmo
PARSING_CMI=\
  parsing/asttypes.cmi \
  parsing/parsetree.cmi

TYPING=typing/ident.cmo typing/path.cmo \
  typing/primitive.cmo typing/type_immediacy.cmo typing/types.cmo \
  typing/btype.cmo typing/oprint.cmo \
  typing/subst.cmo typing/predef.cmo \
  typing/datarepr.cmo file_formats/cmi_format.cmo \
  typing/persistent_env.cmo typing/env.cmo \
  typing/typedtree.cmo typing/printtyped.cmo typing/ctype.cmo \
  typing/printtyp.cmo typing/includeclass.cmo \
  typing/mtype.cmo typing/envaux.cmo typing/includecore.cmo \
  typing/tast_iterator.cmo typing/tast_mapper.cmo typing/stypes.cmo \
  file_formats/cmt_format.cmo typing/cmt2annot.cmo typing/untypeast.cmo \
  typing/includemod.cmo typing/typetexp.cmo typing/printpat.cmo \
  typing/patterns.cmo typing/parmatch.cmo \
  typing/typedecl_properties.cmo typing/typedecl_variance.cmo \
  typing/typedecl_unboxed.cmo typing/typedecl_immediacy.cmo \
  typing/typedecl_separability.cmo \
  typing/typedecl.cmo typing/typeopt.cmo \
  typing/rec_check.cmo typing/typecore.cmo typing/typeclass.cmo \
  typing/typemod.cmo
TYPING_CMI=\
  typing/annot.cmi \
  typing/outcometree.cmi

LAMBDA=lambda/debuginfo.cmo \
  lambda/lambda.cmo lambda/printlambda.cmo \
  lambda/switch.cmo lambda/matching.cmo \
  lambda/translobj.cmo lambda/translattribute.cmo \
  lambda/translprim.cmo lambda/translcore.cmo \
  lambda/translclass.cmo lambda/translmod.cmo \
  lambda/simplif.cmo lambda/runtimedef.cmo
LAMBDA_CMI=

COMP=\
  bytecomp/meta.cmo bytecomp/opcodes.cmo \
  bytecomp/bytesections.cmo bytecomp/dll.cmo \
  bytecomp/symtable.cmo \
  driver/pparse.cmo driver/compenv.cmo \
  driver/main_args.cmo driver/compmisc.cmo \
  driver/makedepend.cmo \
  driver/compile_common.cmo
COMP_CMI=\
  file_formats/cmo_format.cmi \
  file_formats/cmx_format.cmi \
  file_formats/cmxs_format.cmi
# All file format descriptions (including cmx{,s}) are in the
# ocamlcommon library so that ocamlobjinfo can depend on them.

COMMON_CMI=$(UTILS_CMI) $(PARSING_CMI) $(TYPING_CMI) $(LAMBDA_CMI) $(COMP_CMI)
COMMON=$(UTILS) $(PARSING) $(TYPING) $(LAMBDA) $(COMP)

COMMON_PREFIX=ocamlcommon__

PREFIXED_COMMON=$(call prefix-file,$(COMMON_PREFIX),$(COMMON))
PREFIXED_COMMON_CMI=$(call prefix-file,$(COMMON_PREFIX),$(COMMON_CMI))

DEPRECATED_COMMON=$(call deprecated-file,$(COMMON))
DEPRECATED_COMMON_CMI=$(call deprecated-file,$(COMMON_CMI))

$(eval $(call declare-map,$(COMMON_PREFIX),$(PREFIXED_COMMON) $(PREFIXED_COMMON_CMI)))
$(eval $(call declare-library,$(COMMON_PREFIX),$(COMMON),$(COMMON_CMI)))

BYTECOMP=bytecomp/instruct.cmo bytecomp/bytegen.cmo \
  bytecomp/printinstr.cmo bytecomp/emitcode.cmo \
  bytecomp/bytelink.cmo bytecomp/bytelibrarian.cmo bytecomp/bytepackager.cmo \
  driver/errors.cmo driver/compile.cmo
BYTECOMP_CMI=

BYTECOMP_PREFIX=ocamlbytecomp__
PREFIXED_BYTECOMP=$(call prefix-file,$(BYTECOMP_PREFIX),$(BYTECOMP))
PREFIXED_BYTECOMP_CMI=$(call prefix-file,$(BYTECOMP_PREFIX),$(BYTECOMP_CMI))
DEPRECATED_BYTECOMP=$(call deprecated-file,$(BYTECOMP))
DEPRECATED_BYTECOMP_CMI=$(call deprecated-file,$(BYTECOMP_CMI))

$(eval $(call declare-map,$(BYTECOMP_PREFIX),$(PREFIXED_BYTECOMP) $(PREFIXED_BYTECOMP_CMI)))
$(eval $(call declare-library,$(BYTECOMP_PREFIX),$(BYTECOMP),$(BYTECOMP_CMI)))

INTEL_ASM=\
  asmcomp/x86_proc.cmo \
  asmcomp/x86_dsl.cmo \
  asmcomp/x86_gas.cmo \
  asmcomp/x86_masm.cmo
INTEL_ASM_CMI=\
  asmcomp/x86_ast.cmi

ARCH_SPECIFIC_ASMCOMP=
ARCH_SPECIFIC_ASMCOMP_CMI=
ifeq ($(ARCH),i386)
ARCH_SPECIFIC_ASMCOMP=$(INTEL_ASM)
ARCH_SPECIFIC_ASMCOMP_CMI=$(INTEL_ASM_CMI)
endif
ifeq ($(ARCH),amd64)
ARCH_SPECIFIC_ASMCOMP=$(INTEL_ASM)
ARCH_SPECIFIC_ASMCOMP_CMI=$(INTEL_ASM_CMI)
endif

ASMCOMP=\
  $(ARCH_SPECIFIC_ASMCOMP) \
  asmcomp/arch.cmo \
  asmcomp/cmm.cmo asmcomp/printcmm.cmo \
  asmcomp/reg.cmo asmcomp/debug/reg_with_debug_info.cmo \
  asmcomp/debug/reg_availability_set.cmo \
  asmcomp/mach.cmo asmcomp/proc.cmo \
  asmcomp/afl_instrument.cmo \
  asmcomp/strmatch.cmo \
  asmcomp/cmmgen_state.cmo \
  asmcomp/cmm_helpers.cmo \
  asmcomp/cmmgen.cmo \
  asmcomp/interval.cmo \
  asmcomp/printmach.cmo asmcomp/selectgen.cmo \
  asmcomp/spacetime_profiling.cmo asmcomp/selection.cmo \
  asmcomp/comballoc.cmo \
  asmcomp/CSEgen.cmo asmcomp/CSE.cmo \
  asmcomp/liveness.cmo \
  asmcomp/spill.cmo asmcomp/split.cmo \
  asmcomp/interf.cmo asmcomp/coloring.cmo \
  asmcomp/linscan.cmo \
  asmcomp/reloadgen.cmo asmcomp/reload.cmo \
  asmcomp/deadcode.cmo \
  asmcomp/linear.cmo asmcomp/printlinear.cmo asmcomp/linearize.cmo \
  asmcomp/debug/available_regs.cmo \
  asmcomp/debug/compute_ranges_intf.cmo \
  asmcomp/debug/compute_ranges.cmo \
  asmcomp/schedgen.cmo asmcomp/scheduling.cmo \
  asmcomp/branch_relaxation_intf.cmo \
  asmcomp/branch_relaxation.cmo \
  asmcomp/emitaux.cmo asmcomp/emit.cmo asmcomp/asmgen.cmo \
  asmcomp/asmlink.cmo asmcomp/asmlibrarian.cmo asmcomp/asmpackager.cmo \
  driver/opterrors.cmo driver/optcompile.cmo
ASMCOMP_CMI=$(ARCH_SPECIFIC_ASMCOMP_CMI)

# Files under middle_end/ are not to reference files under asmcomp/.
# This ensures that the middle end can be linked (e.g. for objinfo) even when
# the native code compiler is not present for some particular target.

MIDDLE_END_CLOSURE=\
  middle_end/closure/closure.cmo \
  middle_end/closure/closure_middle_end.cmo
MIDDLE_END_CLOSURE_CMI=

# Owing to dependencies through [Compilenv], which would be
# difficult to remove, some of the lower parts of Flambda (anything that is
# saved in a .cmx file) have to be included in the [MIDDLE_END] stanza, below.
MIDDLE_END_FLAMBDA=\
  middle_end/flambda/import_approx.cmo \
  middle_end/flambda/lift_code.cmo \
  middle_end/flambda/closure_conversion_aux.cmo \
  middle_end/flambda/closure_conversion.cmo \
  middle_end/flambda/initialize_symbol_to_let_symbol.cmo \
  middle_end/flambda/lift_let_to_initialize_symbol.cmo \
  middle_end/flambda/find_recursive_functions.cmo \
  middle_end/flambda/invariant_params.cmo \
  middle_end/flambda/inconstant_idents.cmo \
  middle_end/flambda/alias_analysis.cmo \
  middle_end/flambda/lift_constants.cmo \
  middle_end/flambda/share_constants.cmo \
  middle_end/flambda/simplify_common.cmo \
  middle_end/flambda/remove_unused_arguments.cmo \
  middle_end/flambda/remove_unused_closure_vars.cmo \
  middle_end/flambda/remove_unused_program_constructs.cmo \
  middle_end/flambda/simplify_boxed_integer_ops.cmo \
  middle_end/flambda/simplify_primitives.cmo \
  middle_end/flambda/inlining_stats_types.cmo \
  middle_end/flambda/inlining_stats.cmo \
  middle_end/flambda/inline_and_simplify_aux.cmo \
  middle_end/flambda/remove_free_vars_equal_to_args.cmo \
  middle_end/flambda/extract_projections.cmo \
  middle_end/flambda/augment_specialised_args.cmo \
  middle_end/flambda/unbox_free_vars_of_closures.cmo \
  middle_end/flambda/unbox_specialised_args.cmo \
  middle_end/flambda/unbox_closures.cmo \
  middle_end/flambda/inlining_transforms.cmo \
  middle_end/flambda/inlining_decision.cmo \
  middle_end/flambda/inline_and_simplify.cmo \
  middle_end/flambda/ref_to_variables.cmo \
  middle_end/flambda/flambda_invariants.cmo \
  middle_end/flambda/traverse_for_exported_symbols.cmo \
  middle_end/flambda/build_export_info.cmo \
  middle_end/flambda/closure_offsets.cmo \
  middle_end/flambda/un_anf.cmo \
  middle_end/flambda/flambda_to_clambda.cmo \
  middle_end/flambda/flambda_middle_end.cmo
MIDDLE_END_FLAMBDA_CMI=\
  middle_end/flambda/inlining_decision_intf.cmi \
  middle_end/flambda/simplify_boxed_integer_ops_intf.cmi

MIDDLE_END=\
  middle_end/internal_variable_names.cmo \
  middle_end/linkage_name.cmo \
  middle_end/compilation_unit.cmo \
  middle_end/variable.cmo \
  middle_end/flambda/base_types/closure_element.cmo \
  middle_end/flambda/base_types/closure_id.cmo \
  middle_end/symbol.cmo \
  middle_end/backend_var.cmo \
  middle_end/clambda_primitives.cmo \
  middle_end/printclambda_primitives.cmo \
  middle_end/clambda.cmo \
  middle_end/printclambda.cmo \
  middle_end/semantics_of_primitives.cmo \
  middle_end/convert_primitives.cmo \
  middle_end/flambda/base_types/id_types.cmo \
  middle_end/flambda/base_types/export_id.cmo \
  middle_end/flambda/base_types/tag.cmo \
  middle_end/flambda/base_types/mutable_variable.cmo \
  middle_end/flambda/base_types/set_of_closures_id.cmo \
  middle_end/flambda/base_types/set_of_closures_origin.cmo \
  middle_end/flambda/base_types/closure_origin.cmo \
  middle_end/flambda/base_types/var_within_closure.cmo \
  middle_end/flambda/base_types/static_exception.cmo \
  middle_end/flambda/pass_wrapper.cmo \
  middle_end/flambda/allocated_const.cmo \
  middle_end/flambda/parameter.cmo \
  middle_end/flambda/projection.cmo \
  middle_end/flambda/flambda.cmo \
  middle_end/flambda/flambda_iterators.cmo \
  middle_end/flambda/flambda_utils.cmo \
  middle_end/flambda/freshening.cmo \
  middle_end/flambda/effect_analysis.cmo \
  middle_end/flambda/inlining_cost.cmo \
  middle_end/flambda/simple_value_approx.cmo \
  middle_end/flambda/export_info.cmo \
  middle_end/flambda/export_info_for_pack.cmo \
  middle_end/compilenv.cmo \
  $(MIDDLE_END_CLOSURE) \
  $(MIDDLE_END_FLAMBDA)
MIDDLE_END_CMI=\
  middle_end/backend_intf.cmi \
  $(MIDDLE_END_CLOSURE_CMI) \
  $(MIDDLE_END_FLAMBDA_CMI)

MIDDLE_END_PREFIX=ocamlmiddleend__

PREFIXED_MIDDLE_END=$(call prefix-file,$(OPTCOMP_PREFIX),$(MIDDLE_END))
PREFIXED_MIDDLE_END_CMI=$(call prefix-file,$(OPTCOMP_PREFIX),$(MIDDLE_END_CMI))

DEPRECATED_MIDDLE_END=$(call deprecated-file,$(MIDDLE_END))
DEPRECATED_MIDDLE_END_CMI=$(call deprecated-file,$(MIDDLE_END_CMI))

OPTCOMP=$(MIDDLE_END) $(ASMCOMP)
OPTCOMP_CMI=$(MIDDLE_END_CMI) $(ASMCOMP_CMI)

OPTCOMP_PREFIX=ocamloptcomp__

PREFIXED_OPTCOMP=$(call prefix-file,$(OPTCOMP_PREFIX),$(OPTCOMP))
PREFIXED_OPTCOMP_CMI=$(call prefix-file,$(OPTCOMP_PREFIX),$(OPTCOMP_CMI))

DEPRECATED_OPTCOMP=$(call deprecated-file,$(OPTCOMP))
DEPRECATED_OPTCOMP_CMI=$(call deprecated-file,$(OPTCOMP_CMI))

$(eval $(call declare-map,$(MIDDLE_END_PREFIX),$(PREFIXED_MIDDLE_END) $(PREFIXED_MIDDLE_END_CMI)))
$(eval $(call declare-map,$(OPTCOMP_PREFIX),$(PREFIXED_OPTCOMP) $(PREFIXED_OPTCOMP_CMI)))
$(eval $(call declare-library,$(OPTCOMP_PREFIX),$(OPTCOMP),$(OPTCOMP_CMI)))

GENPRINTVAL=toplevel/genprintval.cmo
TOPDIRS=toplevel/topdirs.cmo
TOPLEVEL=$(GENPRINTVAL) toplevel/toploop.cmo \
  toplevel/trace.cmo $(TOPDIRS) toplevel/topmain.cmo
TOPLEVEL_CMI=

DO_NOT_PREFIX += $(TOPDIRS)

TOPLEVEL_PREFIX=ocamltoplevel__

PREFIXED_TOPLEVEL=$(call prefix-file,$(TOPLEVEL_PREFIX),$(TOPLEVEL))
PREFIXED_TOPLEVEL_CMI=$(call prefix-file,$(TOPLEVEL_PREFIX),$(TOPLEVEL_CMI))

DEPRECATED_TOPLEVEL=$(call deprecated-file,$(TOPLEVEL))
DEPRECATED_TOPLEVEL_CMI=$(call deprecated-file,$(TOPLEVEL_CMI))

$(eval $(call declare-map,$(TOPLEVEL_PREFIX),$(PREFIXED_TOPLEVEL) $(PREFIXED_TOPLEVEL_CMI)))
$(eval $(call declare-library,$(TOPLEVEL_PREFIX),$(TOPLEVEL),$(TOPLEVEL_CMI)))

OPTTOPDIRS=toplevel/opttopdirs.cmo
OPTTOPLEVEL_NO_GENPRINTVAL=toplevel/opttoploop.cmo \
  $(OPTTOPDIRS) toplevel/opttopmain.cmo
OPTTOPLEVEL=$(GENPRINTVAL) $(OPTTOPLEVEL_NO_GENPRINTVAL)
OPTTOPLEVEL_CMI=

DO_NOT_PREFIX += $(OPTTOPDIRS)

OPTTOPLEVEL_PREFIX=ocamlopttoplevel__

PREFIXED_OPTTOPLEVEL=$(call prefix-file,$(TOPLEVEL_PREFIX),$(GENPRINTVAL)) \
	$(call prefix-file,$(OPTTOPLEVEL_PREFIX),$(OPTTOPLEVEL_NO_GENPRINTVAL))
PREFIXED_OPTTOPLEVEL_CMI=$(call prefix-file,$(OPTTOPLEVEL_PREFIX),$(OPTTOPLEVEL_CMI))

DEPRECATED_OPTTOPLEVEL=$(call deprecated-file,$(OPTTOPLEVEL))
DEPRECATED_OPTTOPLEVEL_CMI=$(call deprecated-file,$(OPTTOPLEVEL_CMI))

$(eval $(call declare-map,$(OPTTOPLEVEL_PREFIX),$(PREFIXED_OPTTOPLEVEL) $(PREFIXED_OPTTOPLEVEL_CMI)))
$(eval $(call declare-library,$(OPTTOPLEVEL_PREFIX),$(OPTTOPLEVEL_NO_GENPRINTVAL),$(OPTTOPLEVEL_CMI)))

$(PREFIXED_COMMON:.cmo=.cmx) $(PREFIXED_BYTECOMP:.cmo=.cmx) $(PREFIXED_OPTCOMP:.cmo=.cmx): ocamlopt
$(PREFIXED_OPTTOPLEVEL:.cmo=.cmx): ocamlopt

compilerlibs/ocamlcommon.cma: $(PREFIXED_COMMON_CMI) $(PREFIXED_COMMON) $(DEPRECATED_COMMON_CMI) $(DEPRECATED_COMMON)
	$(CAMLC) -a -linkall -o $@ $(PREFIXED_COMMON) $(DEPRECATED_COMMON)
partialclean::
	rm -f compilerlibs/ocamlcommon.cma

compilerlibs/ocamlcommon.cmxa: $(PREFIXED_COMMON_CMI) $(PREFIXED_COMMON:.cmo=.cmx) $(DEPRECATED_COMMON_CMI) $(DEPRECATED_COMMON:.cmo=.cmx)
	$(CAMLOPT) -a -linkall -o $@ $(PREFIXED_COMMON:.cmo=.cmx) $(DEPRECATED_COMMON:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlcommon.cmxa \
	      compilerlibs/ocamlcommon.a compilerlibs/ocamlcommon.lib


compilerlibs/ocamlbytecomp.cma: $(PREFIXED_BYTECOMP_CMI) $(PREFIXED_BYTECOMP) $(DEPRECATED_BYTECOMP_CMI) $(DEPRECATED_BYTECOMP)
	$(CAMLC) -a -o $@ $(PREFIXED_BYTECOMP) $(DEPRECATED_BYTECOMP)
partialclean::
	rm -f compilerlibs/ocamlbytecomp.cma

compilerlibs/ocamlbytecomp.cmxa: $(PREFIXED_BYTECOMP_CMI) $(PREFIXED_BYTECOMP:.cmo=.cmx) $(DEPRECATED_BYTECOMP_CMI) $(DEPRECATED_BYTECOMP:.cmo=.cmx)
	$(CAMLOPT) -a $(OCAML_NATDYNLINKOPTS) -o $@ $(PREFIXED_BYTECOMP:.cmo=.cmx) $(DEPRECATED_BYTECOMP:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlbytecomp.cmxa \
	      compilerlibs/ocamlbytecomp.a compilerlibs/ocamlbytecomp.lib


compilerlibs/ocamlmiddleend.cma: $(PREFIXED_MIDDLE_END_CMI) $(PREFIXED_MIDDLE_END) $(DEPRECATED_MIDDLE_END_CMI) $(DEPRECATED_MIDDLE_END)
	$(CAMLC) -a -o $@ $(PREFIXED_MIDDLE_END) $(DEPRECATED_MIDDLE_END)
compilerlibs/ocamlmiddleend.cmxa: $(PREFIXED_MIDDLE_END_CMI) $(PREFIXED_MIDDLE_END:.cmo=.cmx) $(DEPRECATED_MIDDLE_END_CMI) $(DEPRECATED_MIDDLE_END:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(PREFIXED_MIDDLE_END:.cmo=.cmx) $(DEPRECATED_MIDDLE_END:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlmiddleend.cma \
	      compilerlibs/ocamlmiddleend.cmxa \
	      compilerlibs/ocamlmiddleend.a \
	      compilerlibs/ocamlmiddleend.lib


compilerlibs/ocamloptcomp.cma: $(PREFIXED_OPTCOMP_CMI) $(PREFIXED_OPTCOMP) $(DEPRECATED_OPTCOMP_CMI) $(DEPRECATED_OPTCOMP)
	$(CAMLC) -a -o $@ $(PREFIXED_OPTCOMP) $(DEPRECATED_OPTCOMP)
partialclean::
	rm -f compilerlibs/ocamloptcomp.cma

compilerlibs/ocamloptcomp.cmxa: $(PREFIXED_OPTCOMP_CMI) $(PREFIXED_OPTCOMP:.cmo=.cmx) $(DEPRECATED_OPTCOMP_CMI) $(DEPRECATED_OPTCOMP:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(PREFIXED_OPTCOMP:.cmo=.cmx) $(DEPRECATED_OPTCOMP:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamloptcomp.cmxa \
	      compilerlibs/ocamloptcomp.a compilerlibs/ocamloptcomp.lib


compilerlibs/ocamltoplevel.cma: $(PREFIXED_TOPLEVEL_CMI) $(PREFIXED_TOPLEVEL) $(DEPRECATED_TOPLEVEL_CMI) $(DEPRECATED_TOPLEVEL)
	$(CAMLC) -a -o $@ $(PREFIXED_TOPLEVEL) $(DEPRECATED_TOPLEVEL)
partialclean::
	rm -f compilerlibs/ocamltoplevel.cma

compilerlibs/ocamlopttoplevel.cmxa: $(PREFIXED_OPTTOPLEVEL_CMI) $(PREFIXED_OPTTOPLEVEL:.cmo=.cmx) $(DEPRECATED_OPTTOPLEVEL_CMI) $(DEPRECATED_OPTTOPLEVEL:.cmo=.cmx)
	$(CAMLOPT) -a -o $@ $(PREFIXED_OPTTOPLEVEL:.cmo=.cmx) $(DEPRECATED_OPTTOPLEVEL:.cmo=.cmx)
partialclean::
	rm -f compilerlibs/ocamlopttoplevel.cmxa \
	  compilerlibs/ocamlopttoplevel.a compilerlibs/ocamlopttoplevel.lib

$(COMPILERLIBSDIR)compilerlibs.sed: $(addprefix $(COMPILERLIBSDIR),$(addsuffix .sed,ocamlcommon ocamlbytecomp ocamloptcomp ocamltoplevel ocamlopttoplevel))
	cat $^ > $@

beforedepend:: $(COMPILERLIBSDIR)compilerlibs.sed
