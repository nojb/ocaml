(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*               Nicolas Ojeda Bar <n.oje.bar@gmail.com>               *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* Emission of RISC-V assembly code *)

open Misc
open Cmm
open Arch
open Proc
open Reg
open Mach
open Linearize
open Emitaux

(* Layout of the stack.  The stack is kept 16-aligned. *)

let stack_offset = ref 0

let frame_size () =
  let size =
    !stack_offset +                     (* Trap frame, outgoing parameters *)
    size_int * num_stack_slots.(0) +    (* Local int variables *)
    size_float * num_stack_slots.(1) +  (* Local float variables *)
    (if !contains_calls then size_addr else 0) in (* The return address *)
  Misc.align size 16

let slot_offset loc cls =
  match loc with
  | Local n ->
      if cls = 0
      then !stack_offset + num_stack_slots.(1) * size_float + n * size_int
      else !stack_offset + n * size_float
  | Incoming n -> frame_size() + n
  | Outgoing n -> n

(* Output a symbol *)

let emit_symbol s =
  Emitaux.emit_symbol '.' s

(* Output a label *)

let label_prefix = ".L"

let emit_label lbl =
  emit_string label_prefix; emit_int lbl

let emit_data_label lbl =
  emit_string label_prefix; emit_string "d"; emit_int lbl

(* Section switching *)

let data_space =
  ".section .data"

let code_space =
  ".section .text"

let rodata_space =
  ".section .rodata"

let reg_tmp1 = phys_reg 21 (* used by the assembler *)
let reg_tmp2 = phys_reg 22
let reg_t2 = phys_reg 16
(* let reg_fp = phys_reg 23 *)
let reg_trap = phys_reg 24
let reg_alloc_ptr = phys_reg 25
let reg_alloc_lim = phys_reg 26

(* Names of instructions that differ in 32 and 64-bit modes *)

let lg = if rv64 then "ld" else "lw"
let stg = if rv64 then "sd" else "sw"
let datag = if rv64 then ".quad" else ".long"

(* Output a pseudo-register *)

let emit_reg = function
  | {loc = Reg r} -> emit_string (register_name r)
  | _ -> fatal_error "Emit.emit_reg"

(* Output a stack reference *)

let emit_stack r =
  match r.loc with
    Stack s ->
      let ofs = slot_offset s (register_class r) in `{emit_int ofs}(sp)`
  | _ -> fatal_error "Emit.emit_stack"

let is_immediate n =
  n <= 0x7FF && n >= -0x800

let is_native_immediate n =
  n <= 0x7FFn && n >= -0x800n

(* Output a load *)

let emit_load instr addr arg dst =
  match addr with
  | Iindexed ofs ->
      `	{emit_string instr}	{emit_reg dst}, {emit_int ofs}({emit_reg arg.(0)})\n`

(* Output a store *)

let emit_store instr addr arg src =
  match addr with
  | Iindexed ofs ->
      `	{emit_string instr}	{emit_reg src}, {emit_int ofs}({emit_reg arg.(1)})\n`

(* Record live pointers at call points *)

let record_frame_label live dbg =
  let lbl = new_label() in
  let live_offset = ref [] in
  Reg.Set.iter
    (function
        {typ = Addr; loc = Reg r} ->
          live_offset := (r lsl 1) + 1 :: !live_offset
      | {typ = Addr; loc = Stack s} as reg ->
          live_offset := slot_offset s (register_class reg) :: !live_offset
      | _ -> ())
    live;
  frame_descriptors :=
    { fd_lbl = lbl;
      fd_frame_size = frame_size();
      fd_live_offset = !live_offset;
      fd_debuginfo = dbg } :: !frame_descriptors;
  lbl

let record_frame live dbg =
  let lbl = record_frame_label live dbg in
  `{emit_label lbl}:\n`

(* Record calls to the GC -- we've moved them out of the way *)

type gc_call =
  { gc_lbl: label;                      (* Entry label *)
    gc_return_lbl: label;               (* Where to branch after GC *)
    gc_frame_lbl: label }               (* Label of frame descriptor *)

let call_gc_sites = ref ([] : gc_call list)

let emit_call_gc gc =
  `{emit_label gc.gc_lbl}:	call	{emit_symbol "caml_call_gc"}\n`;
  `{emit_label gc.gc_frame_lbl}:	j	{emit_label gc.gc_return_lbl}\n`

(* Record calls to caml_ml_array_bound_error.
   In debug mode, we maintain one call to caml_ml_array_bound_error
   per bound check site.  Otherwise, we can share a single call. *)

type bound_error_call =
  { bd_lbl: label;                      (* Entry label *)
    bd_frame_lbl: label }               (* Label of frame descriptor *)

let bound_error_sites = ref ([] : bound_error_call list)

let bound_error_label dbg =
  if !Clflags.debug || !bound_error_sites = [] then begin
    let lbl_bound_error = new_label() in
    let lbl_frame = record_frame_label Reg.Set.empty dbg in
    bound_error_sites :=
      { bd_lbl = lbl_bound_error;
        bd_frame_lbl = lbl_frame } :: !bound_error_sites;
    lbl_bound_error
  end else
    let bd = List.hd !bound_error_sites in
    bd.bd_lbl

let emit_call_bound_error bd =
  `{emit_label bd.bd_lbl}:	call	{emit_symbol "caml_ml_array_bound_error"}\n`;
  `{emit_label bd.bd_frame_lbl}:\n`

(* Record floating-point literals *)

let float_literals = ref ([] : (int64 * int) list)

(* Names for various instructions *)

let name_for_intop = function
  | Iadd  -> "add"
  | Isub  -> "sub"
  | Imul  -> "mul"
  | Imulh -> "mulh"
  | Idiv  -> "div"
  | Iand  -> "and"
  | Ior   -> "or"
  | Ixor  -> "xor"
  | Ilsl  -> "sll"
  | Ilsr  -> "srl"
  | Iasr  -> "sra"
  | Imod  -> "rem"
  | _ -> fatal_error "Emit.Intop"

let name_for_intop_imm = function
  | Iadd -> "addi"
  | Iand -> "andi"
  | Ior  -> "ori"
  | Ixor -> "xori"
  | Ilsl -> "slli"
  | Ilsr -> "srli"
  | Iasr -> "srai"
  | _ -> fatal_error "Emit.Intop_imm"

let name_for_floatop1 = function
  | Inegf -> "fneg.d"
  | Iabsf -> "fabs.d"
  | _ -> fatal_error "Emit.Iopf1"

let name_for_floatop2 = function
  | Iaddf -> "fadd.d"
  | Isubf -> "fsub.d"
  | Imulf -> "fmul.d"
  | Idivf -> "fdiv.d"
  | _ -> fatal_error "Emit.Iopf2"

let name_for_specific = function
  | Imultaddf false -> "fmadd.d"
  | Imultaddf true  -> "fnmadd.d"
  | Imultsubf false -> "fmsub.d"
  | Imultsubf true  -> "fnmsub.d"

(* Name of current function *)
let function_name = ref ""
(* Entry point for tail recursive calls *)
let tailrec_entry_point = ref 0

(* Output the assembly code for an instruction *)

let emit_instr i =
  match i.desc with
    Lend -> ()
  | Lop(Imove | Ispill | Ireload) ->
      let src = i.arg.(0) and dst = i.res.(0) in
      if src.loc <> dst.loc then begin
        match (src, dst) with
        | {loc = Reg rs; typ = (Int | Addr)}, {loc = Reg rd} ->
            `	mv      {emit_reg dst}, {emit_reg src}\n`
        | {loc = Reg rs; typ = Float}, {loc = Reg rd; typ = Float} ->
            `	fmv.d   {emit_reg dst}, {emit_reg src}\n`
        | {loc = Reg rs; typ = (Int | Addr)}, {loc = Stack sd} ->
            `	{emit_string stg}	{emit_reg src}, {emit_stack dst}\n`
        | {loc = Reg rs; typ = Float}, {loc = Stack sd} ->
            `	fsd	{emit_reg src}, {emit_stack dst}\n`
        | {loc = Stack ss; typ = (Int | Addr)}, {loc = Reg rd} ->
            `	{emit_string lg}	{emit_reg dst}, {emit_stack src}\n`
        | {loc = Stack ss; typ = Float}, {loc = Reg rd} ->
            `	fld	{emit_reg dst}, {emit_stack src}\n`
        | _ ->
            fatal_error "Emit: Imove"
      end
  | Lop(Iconst_int n | Iconst_blockheader n) ->
      `	li	{emit_reg i.res.(0)}, {emit_nativeint n}\n`
  | Lop(Iconst_float f) ->
      if rv64 then begin
        let n = Int64.to_nativeint (Int64.bits_of_float f) in
        `	li	{emit_reg reg_tmp1}, {emit_nativeint n}\n`;
        `	fmv.d.x	{emit_reg i.res.(0)}, {emit_reg reg_tmp1}\n`
      end else begin
        let lbl = new_label() in
        float_literals := (Int64.bits_of_float f, lbl) :: !float_literals;
        `	auipc	{emit_reg reg_tmp1}, %pcrel_hi({emit_label lbl})\n`;
        `	fld	{emit_reg i.res.(0)}, %lo({emit_label lbl})({emit_reg reg_tmp1})\n`
      end
  | Lop(Iconst_symbol s) ->
      `	la	{emit_reg i.res.(0)}, {emit_symbol s}\n`
  | Lop(Icall_ind) ->
      `	jalr	{emit_reg i.arg.(0)}\n`;
      record_frame i.live i.dbg
  | Lop(Icall_imm s) ->
      `	call	{emit_symbol s}\n`;
      record_frame i.live i.dbg
  | Lop(Itailcall_ind) ->
      let n = frame_size() in
      if !contains_calls then
        `	{emit_string lg}	ra, {emit_int(n - size_addr)}(sp)\n`;
      if n > 0 then
        `	addi	sp, sp, {emit_int n}\n`;
      `	jr	{emit_reg i.arg.(0)}\n`
  | Lop(Itailcall_imm s) ->
      if s = !function_name then begin
        `	j	{emit_label !tailrec_entry_point}\n`
      end else begin
        let n = frame_size() in
        if !contains_calls then
          `	{emit_string lg}	ra, {emit_int(n - size_addr)}(sp)\n`;
        if n > 0 then
          `	addi	sp, sp, {emit_int n}\n`;
        `	tail	{emit_symbol s}\n`
      end
  | Lop(Iextcall(s, true)) ->
      `	la	{emit_reg reg_t2}, {emit_symbol s}\n`;
      `	call	{emit_symbol "caml_c_call"}\n`;
      record_frame i.live i.dbg
  | Lop(Iextcall(s, false)) ->
      `	call	{emit_symbol s}\n`
  | Lop(Istackoffset n) ->
      assert (n mod 16 = 0);
      `	addi	sp, sp, {emit_int (-n)}\n`;
      stack_offset := !stack_offset + n
  | Lop(Iload(chunk, addr)) ->
      let loadinstr =
        match chunk with
        | Byte_unsigned -> "lbu"
        | Byte_signed -> "lb"
        | Sixteen_unsigned -> "lhu"
        | Sixteen_signed -> "lh"
        | Thirtytwo_unsigned -> if rv64 then "lwu" else "lw"
        | Thirtytwo_signed -> "lw"
        | Word -> lg
        | Single -> "flw"
        | Double | Double_u -> "fld"
      in
      emit_load loadinstr addr i.arg i.res.(0)
  | Lop(Istore(chunk, addr, _)) ->
      let storeinstr =
        match chunk with
        | Byte_unsigned | Byte_signed -> "sb"
        | Sixteen_unsigned | Sixteen_signed -> "sh"
        | Thirtytwo_unsigned -> if rv64 then "swu" else "sw"
        | Thirtytwo_signed -> "sw"
        | Word -> stg
        | Single -> "fsw"
        | Double | Double_u -> "fsd" in
      emit_store storeinstr addr i.arg i.arg.(0)
  | Lop(Ialloc n) ->
      let lbl_frame = record_frame_label i.live i.dbg in
      let lbl_redo = new_label () in
      let lbl_call_gc = new_label () in
      `{emit_label lbl_redo}:`;
      `	addi	{emit_reg reg_alloc_ptr}, {emit_reg reg_alloc_ptr}, -{emit_int n}\n`;
      `	addi	{emit_reg i.res.(0)}, {emit_reg reg_alloc_ptr}, {emit_int size_addr}\n`;
      `	bltu	{emit_reg reg_alloc_ptr}, {emit_reg reg_alloc_lim}, {emit_label lbl_call_gc}\n`;
      call_gc_sites :=
        { gc_lbl = lbl_call_gc;
          gc_return_lbl = lbl_redo;
          gc_frame_lbl = lbl_frame } :: !call_gc_sites
  | Lop(Iintop(Icomp cmp)) ->
      begin match cmp with
      | Isigned Clt ->
          `	slt	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`
      | Isigned Cge ->
          let lbl = new_label () in
          `	bge	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`;
          `	li	{emit_reg i.res.(0)}, 0\n`;
          `{emit_label lbl}:\n`;
          `	li	{emit_reg i.res.(0)}, 1\n`;
      | Isigned Cgt ->
          `	slt	{emit_reg i.res.(0)}, {emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`
      | Isigned Cle ->
          let lbl = new_label () in
          `	ble	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`;
          `	li	{emit_reg i.res.(0)}, 0\n`;
          `{emit_label lbl}:\n`;
          `	li	{emit_reg i.res.(0)}, 1\n`;
      | Isigned Ceq | Iunsigned Ceq ->
          `	xor	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
          `	seqz	{emit_reg i.res.(0)}, {emit_reg i.res.(0)}\n`
      | Isigned Cne | Iunsigned Cne ->
          `	xor	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
          `	snez	{emit_reg i.res.(0)}, {emit_reg i.res.(0)}\n`
      | Iunsigned Clt ->
          `	sltu	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`
      | Iunsigned Cge ->
          let lbl = new_label () in
          `	bgeu	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`;
          `	li	{emit_reg i.res.(0)}, 0\n`;
          `{emit_label lbl}:\n`;
          `	li	{emit_reg i.res.(0)}, 1\n`;
      | Iunsigned Cgt ->
          `	sltu	{emit_reg i.res.(0)}, {emit_reg i.arg.(1)}, {emit_reg i.arg.(0)}\n`
      | Iunsigned Cle ->
          let lbl = new_label () in
          `	bleu	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`;
          `	li	{emit_reg i.res.(0)}, 0\n`;
          `{emit_label lbl}:\n`;
          `	li	{emit_reg i.res.(0)}, 1\n`;
      end
  | Lop(Iintop Icheckbound) ->
      let lbl = bound_error_label i.dbg in
      `	bleu	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`
  | Lop(Iintop op) ->
      let instr = name_for_intop op in
      `	{emit_string instr}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`
  | Lop(Iintop_imm(Isub, n)) ->
      `	addi	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_int(-n)}\n`
  | Lop(Iintop_imm(Icomp _, _)) ->
      fatal_error "Emit.emit_instr (Iintop_imm (Icomp _, _))"
  | Lop(Iintop_imm(Icheckbound, n)) ->
      let lbl = bound_error_label i.dbg in
      `	li	{emit_reg reg_tmp1}, {emit_int n}\n`;
      `	bleu	{emit_reg i.arg.(0)}, {emit_reg reg_tmp1}, {emit_label lbl}\n`
  | Lop(Iintop_imm(Imul, n)) ->
      `	li	{emit_reg i.res.(0)}, {emit_int n}\n`;
      `	mul	{emit_reg i.res.(0)}, {emit_reg i.res.(0)}, {emit_reg i.arg.(0)}\n`
  | Lop(Iintop_imm(op, n)) ->
      let instr = name_for_intop_imm op in
      `	{emit_string instr}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_int n}\n`
  | Lop(Inegf | Iabsf as op) ->
      let instr = name_for_floatop1 op in
      `	{emit_string instr}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}\n`
  | Lop(Iaddf | Isubf | Imulf | Idivf as op) ->
      let instr = name_for_floatop2 op in
      `	{emit_string instr}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`
  | Lop(Ifloatofint) ->
      let name = if rv64 then "fcvt.d.l" else "fcvt.d.w" in
      `	{emit_string name}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}\n`
  | Lop(Iintoffloat) ->
      let name = if rv64 then "fcvt.l.d" else "fcvt.w.d" in
      `	{emit_string name}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}\n`
  | Lop(Ispecific sop) ->
      let instr = name_for_specific sop in
      `	{emit_string instr}	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_reg i.arg.(2)}\n`
  | Lreloadretaddr ->
      let n = frame_size () in
      `	{emit_string lg}	ra, {emit_int(n - size_addr)}(sp)\n`
  | Lreturn ->
      let n = frame_size() in
      if n > 0 then
        `	addi	sp, sp, {emit_int n}\n`;
      `	ret\n`
  | Llabel lbl ->
      `{emit_label lbl}:\n`
  | Lbranch lbl ->
      `	j	{emit_label lbl}\n`
  | Lcondbranch(tst, lbl) ->
      begin match tst with
      | Itruetest ->
          `	bnez	{emit_reg i.arg.(0)}, {emit_label lbl}\n`
      | Ifalsetest ->
          `	beqz	{emit_reg i.arg.(0)}, {emit_label lbl}\n`
      | Iinttest cmp ->
          let name = match cmp with
            | Iunsigned Ceq | Isigned Ceq -> "beq"
            | Iunsigned Cne | Isigned Cne -> "bne"
            | Iunsigned Cle -> "bleu" | Isigned Cle -> "ble"
            | Iunsigned Cge -> "bgeu" | Isigned Cge -> "bge"
            | Iunsigned Clt -> "bltu" | Isigned Clt -> "blt"
            | Iunsigned Cgt -> "bgtu" | Isigned Cgt -> "bgt"
          in
          `	{emit_string name}	{emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}, {emit_label lbl}\n`
      | Iinttest_imm _ ->
          fatal_error "Emit.emit_instr (Iinttest_imm _)"
      | Ifloattest(cmp, neg) -> (* FIXME NaNs *)
          let (comp, neg) = match cmp with
            | Ceq -> ("eq", neg) | Cne -> ("eq", not neg)
            | Clt  -> ("lt", neg) | Cgt -> ("lt", not neg)
            | Cle -> ("le", neg) | Cge -> ("le", not neg)
          in
          `	f{emit_string comp}.d	{emit_reg reg_tmp1}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`;
          if neg then
            `	beqz	{emit_reg reg_tmp1}, {emit_label lbl}\n`
          else
            `	bnez	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      | Ioddtest ->
          `	andi	{emit_reg reg_tmp1}, {emit_reg i.arg.(0)}, 1\n`;
          `	bnez	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      | Ieventest ->
          `	andi	{emit_reg reg_tmp1}, {emit_reg i.arg.(0)}, 1\n`;
          `	beqz	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      end
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
      `	addi	{emit_reg reg_tmp1}, {emit_reg i.arg.(0)}, -1\n`;
      begin match lbl0 with
      | None -> ()
      | Some lbl -> `	bltz	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      end;
      begin match lbl1 with
      | None -> ()
      | Some lbl -> `	beqz	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      end;
      begin match lbl2 with
      | None -> ()
      | Some lbl -> `	bgtz	{emit_reg reg_tmp1}, {emit_label lbl}\n`
      end
  | Lswitch jumptbl -> (* FIXME FIXME ? *)
      let lbl = new_label() in
      `	la	{emit_reg reg_tmp1}, {emit_label lbl}\n`;
      `	slli	{emit_reg reg_tmp2}, {emit_reg i.arg.(0)}, 2\n`;
      `	add	{emit_reg reg_tmp1}, {emit_reg reg_tmp1}, {emit_reg reg_tmp2}\n`;
      `	jr	{emit_reg reg_tmp1}\n`;
      `{emit_label lbl}:`;
      for i = 0 to Array.length jumptbl - 1 do
        `	j	{emit_label jumptbl.(i)}\n`
      done
  | Lsetuptrap lbl ->
      `	addi	sp, sp, -16\n`;
      `	jal	{emit_label lbl}\n`
  | Lpushtrap ->
      stack_offset := !stack_offset + 16;
      `	{emit_string stg}	ra, {emit_int size_addr}(sp)\n`;
      `	{emit_string stg}	{emit_reg reg_trap}, 0(sp)\n`;
      `	mv	{emit_reg reg_trap}, sp\n`
  | Lpoptrap ->
      `	{emit_string lg}	{emit_reg reg_trap}, 0(sp)\n`;
      `	addi	sp, sp, 16\n`;
      stack_offset := !stack_offset - 16
  | Lraise k ->
      begin match !Clflags.debug, k with
      | true, (Lambda.Raise_regular | Lambda.Raise_reraise) ->
          `	call	{emit_symbol "caml_raise_exn"}\n`;
          record_frame Reg.Set.empty i.dbg
      | false, _
      | true, Lambda.Raise_notrace ->
          `	mv	sp, {emit_reg reg_trap}\n`;
          `	{emit_string lg}	{emit_reg reg_tmp1}, {emit_int size_addr}(sp)\n`;
          `	{emit_string lg}	{emit_reg reg_trap}, 0(sp)\n`;
          `	addi	sp, sp, 16\n`;
          `	jalr	{emit_reg reg_tmp1}\n`
      end

(* Emit a sequence of instructions *)

let rec emit_all = function
  | {desc = Lend} -> () | i -> emit_instr i; emit_all i.next

(* Emission of a function declaration *)

let fundecl fundecl =
  function_name := fundecl.fun_name;
  tailrec_entry_point := new_label();
  stack_offset := 0;
  call_gc_sites := [];
  bound_error_sites := [];
  float_literals := [];
  `	.globl	{emit_symbol fundecl.fun_name}\n`;
  `	.type	{emit_symbol fundecl.fun_name}, @function\n`;
  `	{emit_string code_space}\n`;
  `	.align	2\n`;
  `{emit_symbol fundecl.fun_name}:\n`;
  let n = frame_size() in
  if n > 0 then
    `	addi	sp, sp, {emit_int(-n)}\n`;
  if !contains_calls then
    `	{emit_string stg}	ra, {emit_int(n - size_addr)}(sp)\n`;
  `{emit_label !tailrec_entry_point}:\n`;
  emit_all fundecl.fun_body;
  List.iter emit_call_gc !call_gc_sites;
  List.iter emit_call_bound_error !bound_error_sites;
  `	.size	{emit_symbol fundecl.fun_name}, .-{emit_symbol fundecl.fun_name}\n`;
  (* Emit the float literals *)
  if !float_literals <> [] then begin
    `	{emit_string rodata_space}\n`;
    `	.align	3\n`;
    List.iter
      (fun (f, lbl) ->
        `{emit_label lbl}:`;
        if rv64
        then emit_float64_directive ".quad" f
        else emit_float64_split_directive ".long" f)
      !float_literals;
  end

(* Emission of data *)

let declare_global_data s =
  `	.globl	{emit_symbol s}\n`;
  `	.type	{emit_symbol s}, @object\n`

let emit_item = function
  | Cglobal_symbol s ->
      declare_global_data s
  | Cdefine_symbol s ->
      `{emit_symbol s}:\n`;
  | Cdefine_label lbl ->
      `{emit_data_label lbl}:\n`
  | Cint8 n ->
      `	.byte	{emit_int n}\n`
  | Cint16 n ->
      `	.short	{emit_int n}\n`
  | Cint32 n ->
      `	.long	{emit_nativeint n}\n`
  | Cint n ->
      `	{emit_string datag}	{emit_nativeint n}\n`
  | Csingle f ->
      emit_float32_directive ".long" (Int32.bits_of_float f)
  | Cdouble f ->
      if rv64
      then emit_float64_directive ".quad" (Int64.bits_of_float f)
      else emit_float64_split_directive ".long" (Int64.bits_of_float f)
  | Csymbol_address s ->
      `	{emit_string datag}	{emit_symbol s}\n`
  | Clabel_address lbl ->
      `	{emit_string datag}	{emit_data_label lbl}\n`
  | Cstring s ->
      emit_bytes_directive "	.byte	" s
  | Cskip n ->
      if n > 0 then `	.space	{emit_int n}\n`
  | Calign n ->
      `	.align	{emit_int (Misc.log2 n)}\n`

let data l =
  `	{emit_string data_space}\n`;
  List.iter emit_item l

(* Beginning / end of an assembly file *)

let begin_assembly() =
  (* Emit the beginning of the segments *)
  let lbl_begin = Compilenv.make_symbol (Some "data_begin") in
  `	{emit_string data_space}\n`;
  declare_global_data lbl_begin;
  `{emit_symbol lbl_begin}:\n`;
  let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
  `	{emit_string code_space}\n`;
  declare_global_data lbl_begin;
  `{emit_symbol lbl_begin}:\n`

let end_assembly() =
  `	{emit_string code_space}\n`;
  let lbl_end = Compilenv.make_symbol (Some "code_end") in
  declare_global_data lbl_end;
  `{emit_symbol lbl_end}:\n`;
  `	.long	0\n`;
  `	{emit_string data_space}\n`;
  let lbl_end = Compilenv.make_symbol (Some "data_end") in
  declare_global_data lbl_end;
  `{emit_symbol lbl_end}:\n`;
  `	{emit_string datag}	0\n`;
  (* Emit the frame descriptors *)
  `	{emit_string rodata_space}\n`;
  let lbl = Compilenv.make_symbol (Some "frametable") in
  declare_global_data lbl;
  `{emit_symbol lbl}:\n`;
  emit_frames
    { efa_label = (fun l -> `	{emit_string datag}	{emit_label l}\n`);
      efa_16 = (fun n -> `	.short	{emit_int n}\n`);
      efa_32 = (fun n -> `	.long	{emit_int32 n}\n`);
      efa_word = (fun n -> `	{emit_string datag}	{emit_int n}\n`);
      efa_align = (fun n -> `	.align	{emit_int (Misc.log2 n)}\n`);
      efa_label_rel = (fun lbl ofs ->
                           `	.long	({emit_label lbl} - .) + {emit_int32 ofs}\n`);
      efa_def_label = (fun l -> `{emit_label l}:\n`);
      efa_string = (fun s -> emit_bytes_directive "	.byte	" (s ^ "\000"))
     }
